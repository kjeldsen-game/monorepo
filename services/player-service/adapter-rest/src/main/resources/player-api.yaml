openapi: 3.0.0
info:
  version: 1.0.0
  title: Players Service API

tags:
  - name: team
  - name: player
  - name: player-position-tendencies
  - name: training
  - name: simulator

paths:

  /team:
    get:
      summary: Retrieves the team associated to the logged user
      operationId: getTeam
      tags:
        - team
      responses:
        "200":
          description: Returns the team
          content:
            application/json:
              schema:
                $ref: "#/components/responses/TeamResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /player:
    post:
      summary: Create a player
      operationId: createPlayer
      tags:
        - player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/CreatePlayerRequest"
      responses:
        "201":
          description: Player was created
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
    get:
      summary: Get all players
      operationId: getAllPlayers
      parameters:
        - name: position
          in: query
          description: Position of the player
          required: false
          schema:
            $ref: "#/components/schemas/PlayerPosition"
        - name: size
          in: query
          description: Number of players to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          description: Page number of the players to return
          required: false
          schema:
            default: 0
            type: integer
            format: int32
      tags:
        - player
      responses:
        "200":
          description: Players were retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/responses/PlayerResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /player/{playerId}:
    get:
      summary: Retrieves a player
      operationId: getPlayerById
      tags:
        - player
      parameters:
        - $ref: '#/components/parameters/PlayerIdPathParameter'
      responses:
        "200":
          description: Returns the player
          content:
            application/json:
              schema:
                $ref: "#/components/responses/PlayerResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /player/generate:
    post:
      summary: Generate a number of players
      operationId: generatePlayer
      tags:
        - player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/GeneratePlayersRequest"
      responses:
        "201":
          description: Players were generated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/responses/PlayerResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /player-position-tendencies:
    get:
      summary: Get all player position tendencies
      operationId: getAllPlayerPositionTendencies
      tags:
        - player-position-tendencies
      responses:
        "200":
          description: Player position tendencies were retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/responses/PlayerPositionTendencyResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /player-position-tendencies/{position}:
    get:
      summary: Get the tendency of a position
      operationId: getPlayerPositionTendency
      parameters:
        - name: position
          in: path
          description: Position of the player
          required: true
          schema:
            $ref: "#/components/schemas/PlayerPosition"
      tags:
        - player-position-tendencies
      responses:
        "200":
          description: Player position tendency was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/responses/PlayerPositionTendencyResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
    patch:
      summary: Update the tendency of a position
      operationId: updatePlayerPositionTendency
      tags:
        - player-position-tendencies
      parameters:
        - name: position
          in: path
          description: Position of the player
          required: true
          schema:
            $ref: "#/components/schemas/PlayerPosition"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/UpdatePlayerPositionTendencyRequest"
      responses:
        "200":
          description: Player position tendency was updated
          content:
            application/json:
              schema:
                $ref: "#/components/responses/PlayerPositionTendencyResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /training/{playerId}:
    get:
      summary: Get historical training of a player
      operationId: getHistoricalTraining
      tags:
        - training
      parameters:
        - $ref: '#/components/parameters/PlayerIdPathParameter'
      responses:
        "200":
          description: Training historical returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerHistoricalTrainingResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /training/{playerId}/bloom:
    post:
      summary: Register a new bloom phase
      operationId: registerBloomPhase
      tags:
        - training
      parameters:
        - $ref: '#/components/parameters/PlayerIdPathParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/RegisterBloomPhaseRequest"
      responses:
        "201":
          description: Bloom phase was registered
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /simulator/training/{playerId}:
    post:
      summary: Register a simulated scheduled training
      operationId: registerSimulatedScheduledTraining
      tags:
        - simulator
      parameters:
        - $ref: '#/components/parameters/PlayerIdPathParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/RegisterSimulatedScheduledTrainingRequest"
      responses:
        "200":
          description: Simulated training was scheduled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerHistoricalTrainingResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /simulator/decline/{playerId}:
    post:
      summary: Register a simulated decline
      operationId: registerSimulatedDecline
      tags:
        - simulator
      parameters:
        - $ref: '#/components/parameters/PlayerIdPathParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/RegisterSimulatedDeclineRequest"
      responses:
        "200":
          description: Decline phase simulated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerDeclineResponse"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

components:

  parameters:

    PlayerIdPathParameter:
      name: playerId
      in: path
      description: Id of the player
      required: true
      schema:
        type: string

  requestBodies:

    CreatePlayerRequest:
      description: Create player request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatePlayerRequest"

    GeneratePlayersRequest:
      description: Generate players request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneratePlayersRequest"

    UpdatePlayerPositionTendencyRequest:
      description: Update player position tendency request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePlayerPositionTendencyRequest"

    RegisterSimulatedScheduledTrainingRequest:
      description: Register a simulated scheduled training request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterSimulatedScheduledTrainingRequest"

    RegisterBloomPhaseRequest:
      description: Register a bloom phase request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterBloomPhaseRequest"

    RegisterSimulatedDeclineRequest:
      description: Register a simulated decline
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterSimulatedDeclineRequest"

  responses:

    PlayerResponse:
      description: Player response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlayerResponse"

    TeamResponse:
      description: Team response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TeamResponse"

    PlayerPositionTendencyResponse:
      description: Player position tendency response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlayerPositionTendencyResponse"

    PlayerHistoricalTrainingResponse:
      description: Player historical training response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlayerHistoricalTrainingResponse"

    DefaultErrorResponse:
      description: Unexpected error
      content:
        "*/*":
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Error"

  schemas:

    PlayerSkill:
      type: string
      enum:
        - SCORE
        - OFFENSIVE_POSITION
        - BALL_CONTROL
        - PASSING
        - AERIAL
        - CO
        - TACKLING
        - DEFENSE_POSITION
        - REFLEXES
        - POSITIONING
        - INTERCEPTIONS
        - CONTROL
        - ORGANIZATION
        - ONE_ON_ONE

    PlayerSkills:
      type: object
      properties:
        actual:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 5
        potential:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
          example: 30

    PlayerPosition:
      type: string
      enum:
        - CENTRE_BACK
        - AERIAL_CENTRE_BACK
        - FULL_BACK
        - FULL_WINGBACK
        - DEFENSIVE_MIDFIELDER
        - CENTRE_MIDFIELDER
        - OFFENSIVE_MIDFIELDER
        - FORWARD
        - AERIAL_FORWARD
        - GOALKEEPER
      example: FORWARD

    PlayerCategory:
      type: string
      enum:
        - JUNIOR
        - SENIOR
      example: JUNIOR

    CreatePlayerRequest:
      type: object
      properties:
        points:
          type: integer
          format: int32
          minimum: 1
          maximum: 700
          example: 5
        age:
          type: integer
          format: int32
          minimum: 15
          maximum: 33
          example: 21
        position:
          $ref: "#/components/schemas/PlayerPosition"
        PlayerCategory:
          $ref: "#/components/schemas/PlayerCategory"

    GeneratePlayersRequest:
      type: object
      properties:
        numberOfPlayers:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          example: 10

    UpdatePlayerPositionTendencyRequest:
      type: object
      example: { "SCORE": { "actual": 5, "potential": 50 } }
      additionalProperties:
        type: object
        properties:
          key:
            $ref: "#/components/schemas/PlayerSkill"
          value:
            $ref: "#/components/schemas/PlayerSkills"


    TeamResponse:
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
        name:
          type: string
          example: John Doe's Team
        canteraScore:
          type: integer
          format: int32
          example: 15

    PlayerResponse:
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
        age:
          type: integer
          format: int32
          minimum: 15
          maximum: 33
          example: 21
        name:
          type: string
          example: John Doe
        position:
          $ref: "#/components/schemas/PlayerPosition"
        PlayerCategory:
          $ref: "#/components/schemas/PlayerCategory"
        actualSkills:
          additionalProperties:
            type: object
            properties:
              PlayerSkills:
                $ref: "#/components/schemas/PlayerSkills"

    PlayerHistoricalTrainingResponse:
      type: object
      properties:
        playerId:
          type: string
          example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
        trainings:
          type: array
          items:
            $ref: "#/components/schemas/PlayerTrainingResponse"

    PlayerTrainingResponse:
      type: object
      properties:
        playerId:
          type: string
          example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
        skill:
          $ref: "#/components/schemas/PlayerSkill"
        points:
          type: integer
          format: int32
        actualPoints:
          type: integer
          format: int32
        potentialPoints:
          type: integer
          format: int32
        pointsBeforeTraining:
          type: integer
          format: int32
        pointsAfterTraining:
          type: integer
          format: int32
        currentDay:
          type: integer
          format: int32

    PlayerDeclineResponse:
      type: object
      properties:
        playerId:
          type: string
          example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
        skill:
          $ref: "#/components/schemas/PlayerSkill"
        pointsToSubtract:
          type: integer
          format: int32
        pointsBeforeTraining:
          type: integer
          format: int32
        pointsAfterTraining:
          type: integer
          format: int32
        currentDay:
          type: integer
          format: int32

    PlayerPositionTendencyResponse:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/PlayerPosition"
        tendencies:
          type: object
          example: { "SCORE": { "actual": 5, "potential": 50 } }
          additionalProperties:
            type: object
            properties:
              PlayerSkill:
                $ref: "#/components/schemas/PlayerSkill"
              PlayerSkills:
                $ref: "#/components/schemas/PlayerSkills"
        default:
          type: boolean

    RegisterSimulatedScheduledTrainingRequest:
      type: object
      properties:
        days:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          example: 2
        skills:
          type: array
          example: [ PASSING , SCORE ]
          items:
            $ref: "#/components/schemas/PlayerSkill"

    RegisterBloomPhaseRequest:
      type: object
      properties:
        yearsOn:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          example: 3
        bloomStartAge:
          type: integer
          format: int32
          minimum: 15
          maximum: 30
          example: 18
        bloomSpeed:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          example: 350

    RegisterSimulatedDeclineRequest:
      type: object
      properties:
        daysToDecline:
          type: integer
          format: int32
          minimum: 15
          maximum: 30
          example: 18
        declineSpeed:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          example: 350

    RegisterRightDeclinePhaseRequest:
      type: object
      properties:
        declineStartAge:
          type: integer
          format: int32
          minimum: 15
          maximum: 30
          example: 18
        declineSpeed:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          example: 350

    Error:
      type: "object"
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

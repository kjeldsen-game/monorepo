openapi: 3.0.0
info:
  version: 1.0.0
  title: Authentication API

servers:
  - url: http://localhost:15001/v1

tags:
  - name: auth

paths:
  /auth/register:
    post:
      summary: Register
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Registration successful
        "400":
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/token:
    post:
      summary: "Generate JWT Token"
      description: "Authenticates a user and provides a JWT token upon successful authentication"
      operationId: "generateToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRequest"
      responses:
        "200":
          description: "Token generated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          $ref: "#/components/responses/DefaultErrorResponse"
        "404":
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/me:
    get:
      summary: Get currently logged-in user
      operationId: me
      responses:
        "200":
          description: Logged-in user found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailsResponse"
        "401":
          $ref: "#/components/responses/DefaultErrorResponse"
        "404":
          $ref: "#/components/responses/DefaultErrorResponse"

components:
  responses:
    DefaultErrorResponse:
      description: Unexpected error
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - teamName
        - confirmPassword
      properties:
        email:
          type: string
        teamName:
          type: string
        password:
          type: string
        confirmPassword:
          type: string

    TokenRequest:
      type: object
      properties:
        email:
          type: string
          description: "The email for authentication"
        password:
          type: string
          format: password
          description: "The password for authentication"

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT token that can be used for authorization"

    ErrorResponse:
      type: object
      required:
        - status
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        status:
          type: string

    UserDetailsResponse:
      type: object
      required:
        - id
        - email
        - teamId
      properties:
        id:
          type: string
        email:
          type: string
        teamId:
          type: string

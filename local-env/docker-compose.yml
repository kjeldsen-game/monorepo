services:
    ###############
    ## Local DBs ##
    ###############

    #    local-postgres:
    #        container_name: local-postgres
    #        image: postgres:16
    #        environment:
    #            POSTGRES_USER: root
    #            POSTGRES_PASSWORD: secret
    #            POSTGRES_DB: quartz
    #        ports:
    #            - "5432:5432"
    #        healthcheck:
    #            test: [ "CMD-SHELL", "pg_isready" ]
    #            interval: 10s
    #            timeout: 5s
    #            retries: 5

    local-mongodb:
        image: mongo:5.0
        container_name: local-mongodb
        ports:
            - 27017:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: root
            MONGO_INITDB_DATABASE: admin
        volumes: # Uncomment to persist data locally if container removed
            - ./.mongo_data:/data/db # Uncomment to persist data locally if container removed
            #- ./mongodb_init/mongo-init.js:/docker-entrypoint-initdb.d/init-mongo.js
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 3
            start_period: 5s

    ##################
    ## Main Service ##
    ##################

    main-service:
        # image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/main-service:latest
        build:
            context: ../services/main-service
            dockerfile: ./Dockerfile
        ports:
            - 8081:8081
        container_name: main-service
        env_file:
            - ./config/common.env
            - ./config/main-service.env
        depends_on:
            local-mongodb:
                condition: service_healthy
        healthcheck:
            test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
            interval: 20s
            timeout: 5s
            retries: 5
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.main-service.rule=(PathPrefix(`/v1`) || PathPrefix(`/swagger-ui/index.html`))"
            - "traefik.http.routers.main-service.entrypoints=web"
            - "traefik.http.routers.main-service.priority=10"
            - "traefik.http.services.main-service.loadbalancer.server.port=8081"

    ######################
    ## Frontend Service ##
    ######################

    # TODO change the context + variables to this file once UI is merged to main
    beta-frontend:
        # image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/beta-frontend:latest
        build:
            context: ../../kjeldsen_2/frontends/beta-frontend
            dockerfile: ./Dockerfile
        ports:
            - 3000:3000
        container_name: beta-frontend
        env_file:
            - ../../kjeldsen_2/local-env/config/common.env
            - ../../kjeldsen_2/local-env/config/beta-frontend.env
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.beta-frontend.rule=PathPrefix(`/`)"
            - "traefik.http.routers.beta-frontend.priority=1"
            - "traefik.http.services.beta-frontend.loadbalancer.server.port=3000"

    #############
    ## Routing ##
    #############

#    traefik:
#        image: traefik:v2.10
#        container_name: traefik
#        command:
#            - "--api.insecure=true"
#            - "--providers.docker=true"
#            - "--entrypoints.web.address=:80"
#        ports:
#            - "80:80"
#            - "8080:8080"
#        volumes:
#            - "/var/run/docker.sock:/var/run/docker.sock:ro"

    #####################################
    ## Hosting from machine to network ##
    #####################################

#    ngrok:
#        container_name: ngrok
#        image: ngrok/ngrok:latest
#        command:
#            - "start"
#            - "--all"
#            - "--config"
#            - "/etc/ngrok.yml"
#        volumes:
#            - ./config/ngrok.yml:/etc/ngrok.yml
#        ports:
#            - 4040:4040

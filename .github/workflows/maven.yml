on:
  workflow_call:
    inputs:
      PROJECT_PATH:
        required: true
        type: string
      SERVICE_NAME:
        required: true
        type: string
      DOCKER_IMAGE_GENERATION:
        type: string
        default: "true"
      AWS_ECR_URI:
        required: true
        type: string
      AWS_CICD_ACCESS_KEY: 
        required: true
        type: string
      AWS_CICD_SECRET_ACCESS_KEY:
        required: true
        type: string

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build
        run: |
          cd ${{ inputs.PROJECT_PATH }}
          mvn clean install -U
        shell: bash
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker info
        run: docker info

      - name: Run Integration Tests
        run: |
          cd ${{ inputs.PROJECT_PATH }}
          mvn clean install -DskipTests=true > /dev/null 2>&1
          mvn failsafe:integration-test failsafe:verify -DskipTestsIT=false -DskipTests=true
        shell: bash

  docker-build-and-push:
    name: Build and Push Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate ECR Variables
        id: ecr_variables
        run: |
          echo "ECR_IMAGE_NAME=${{ secrets.AWS_ECR_URI }}/${{ inputs.SERVICE_NAME }}:${{ env.VERSION }}" >> $GITHUB_ENV
        shell: bash

      - name: AWS ECR Configure
        id: ecr_configure
        if: steps.ecr_variables.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1 

      - name: Login to Amazon ECR
        id: login_ecr
        if: steps.ecr_configure.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: ecr_push
        if: steps.login_ecr.outcome == 'success'
        run: |
          cd ${{ inputs.PROJECT_PATH }}
          docker build -t ${{ env.ECR_IMAGE_NAME }} .
          docker push ${{ env.ECR_IMAGE_NAME }}
        shell: bash  
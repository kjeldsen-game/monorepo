on:
  workflow_call:
    inputs:
      PROJECT_PATH:
        required: true
        type: string
      FE_NAME:
        required: true
        type: string
      DOCKER_IMAGE_GENERATION:
        type: string
        default: "true"
      AWS_ECR_URI:
        required: true
        type: string
      AWS_CICD_ACCESS_KEY: 
        required: true
        type: string
      AWS_CICD_SECRET_ACCESS_KEY:
        required: true
        type: string

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: "npm"
        cache-dependency-path: ${{ inputs.PROJECT_PATH }}/package-lock.json

    - name: Build
      run: |
        cd ${{ inputs.PROJECT_PATH }}
        npm install next
        npm run build
      shell: bash

    - name: Test
      run: |
        npm run test
      shell: bash
  
  docker-build-and-push:
    name: Build and Push Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate ECR Variables
        id: ecr_variables
        run: |
          echo "ECR_IMAGE_NAME=${{ inputs.AWS_ECR_URI }}/${{ inputs.NAME }}:${{ env.VERSION }}" >> $GITHUB_ENV
        shell: bash

      - name: AWS ECR Configure
        id: ecr_configure
        if: steps.ecr_variables.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ inputs.AWS_CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ inputs.AWS_CICD_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1 

      - name: Login to Amazon ECR
        id: login_ecr
        if: steps.ecr_configure.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: ecr_push
        if: steps.login_ecr.outcome == 'success'
        run: |
          cd ${{ inputs.PROJECT_PATH }}
          docker build -t ${{ env.ECR_IMAGE_NAME }} .
          docker push ${{ env.ECR_IMAGE_NAME }}
        shell: bash   